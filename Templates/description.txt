In order to create an email using a template to send to our students, we need to first specify what data we require from
the front-end team. The web developers will implement a form on different pages to collect relevant information (for
example, the email address of a student we want to email, the grade they got, etc.) and pass in this data to us using a
text file (.txt). 

The first useful element of this text file (let's call it InputTextFile.txt) is the first two characters of the file name which represents the type of message we should send (notifying student of their grade, reminding them when an assignment is due, etc.). At this point, the Runner class' main method will make a decision on which template file to use as a reference when checking if the rest of the information in InputTextFile.txt is valid. For example, let's say I want to notify a student of their grade once it has been corrected, I will pass in a '0' as the first element of InputTextFile.txt and then I have to say what the student's email was in the next element and then what the grade was. Whereas if I wanted to remind a student of an assignment deadline, this requires a completely different set of information. The templates indicate what information is required for each different type of message we want to send. Main looks at the first integer and then validates the rest of the information we pass in with InputTextFile.txt based on the template for that command.

Design: "N1" = Grade notification  "N2" = Missing assignment  "N3" = Event/class reminder

<Insert IF CODE SNIPPET>

Alternative design: My original idea was to have in the file itself a code (0,1,2) as the first integer which tells you
what type of message is trying to be sent. After consulting with the project manager, we decided it would be more efficient
to just keep getting in files from the front end which we store in a queue and then be able to every 30 seconds, send all
the messages we were holding onto. In this case, since the code itself was inside the file, there was a higher likelihood
that this process would run slower since you would have to manually open the file and make sure there are no errors. In the
design that we chose, we can just look at the file name and make this decision which saves some time.

Design flaw:
More commands can be added to this list though it is not programmatically efficient to write another 'if' statement every time. For example, if now I wanted to be able to send the user a notification every time the teacher made a post on the website, we would have to add a new if statement in the above code. I could have used dynamic allocation to have a single ArrayList of commands, each of which can be accessed using an index rather than having a long list of 'if' statements. Since for this specific project, we only need a few commands, it was simpler to hardcode these commands in.



See FileInputFormat.txt for complete decription of how input data should be formatted as files into our program.
